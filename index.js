require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const categories = require('./data/flowers'); // Changed from 'bouquets' to 'categories'
const shopInfo = require('./data/shopInfo');
const moment = require('moment-timezone');

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

console.log('‘≤’∏’ø’® ’£’∏÷Ä’Æ’°÷Ä’Ø’æ’•÷Å...');

const userStates = {};

const STEPS = {
    WAITING_FOR_LANGUAGE: 'waiting_for_language',
    START: 'start',
    SHOW_CATEGORIES: 'show_categories', // Renamed from SHOW_BOUQUETS
    CATEGORY_SELECTED: 'category_selected', // Renamed from BOUQUET_SELECTED
    WAITING_FOR_DELIVERY_DATE: 'waiting_for_delivery_date',
    WAITING_FOR_DELIVERY_TIME: 'waiting_for_delivery_time',
    WAITING_FOR_ADDRESS: 'waiting_for_address',
    ORDER_CONFIRMED: 'order_confirmed'
};

const texts = {
    hy: {
        weekDays: ['‘µ÷Ä’Ø', '‘µ÷Ä÷Ñ', '’â÷Ä÷Ñ', '’Ä’∂’£', '’à÷Ç÷Ä’¢', '’á’¢’©', '‘ø’´÷Ä'],
        welcome: (userName, shopName) => `*‘≤’°÷Ä÷á ’±’•’¶, ${userName}!* üëã\n‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø *${shopName}*÷â\n\nüå∏ ‘æ’°’≤’Ø’´ ‘ø’°’≠’°÷Ä’§’°’Ø’°’∂ ‘±’∑’≠’°÷Ä’∞ üå∏\n’Ñ’•’∂÷Ñ ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’©’°÷Ä’¥ ÷á ’∂÷Ä’¢’°’£’•’≤ ’Æ’°’≤’Ø’•÷É’∂’ª’•÷Ä ÷Å’°’∂’Ø’°÷Å’°’Æ ’°’º’´’©’´ ’∞’°’¥’°÷Ä÷â ’Ñ’•÷Ä ’Æ’°’≤’´’Ø’∂’•÷Ä’® ’¢’•÷Ä’æ’∏÷Ç’¥ ’•’∂ ’¨’°’æ’°’£’∏÷Ç’µ’∂ ’∫’¨’°’∂’ø’°÷Å’´’°’∂’•÷Ä’´÷Å ÷á ’∫’°’ø÷Ä’°’Ω’ø’æ’∏÷Ç’¥ ’•’∂ ’Ω’´÷Ä’∏’æ ’∏÷Ç ’∂’æ’´÷Ä’∏÷Ç’¥’∏’æ÷â\n\n*‘ª’∂’π’∫’•’û’Ω ’Ø’°÷Ä’∏’≤ ’•’¥ ’±’•’¶ ÷Ö’£’∂’•’¨ ’°’µ’Ω÷Ö÷Ä:* üëá`,
        chooseLanguage: `*‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥, ’®’∂’ø÷Ä’•÷Ñ ’¨’•’¶’∏÷Ç’∂÷â*\n*Please, choose a language.*`,
        mainMenuWelcome: `*‘¥’∏÷Ç÷Ñ ’æ’•÷Ä’°’§’°÷Ä’±’°÷Ñ ’£’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç:* ‚ú®\n‘ª’∂’π’∫’•’û’Ω ’Ø’°÷Ä’∏’≤ ’•’¥ ’±’•’¶ ÷Ö’£’∂’•’¨ ’°’µ’Ω÷Ö÷Ä÷â`,
        orderBouquet: 'üíê ’ä’°’ø’æ’´÷Ä’•’¨ ‘æ’°’≤’Ø’•÷É’∏÷Ç’∂’ª',
        aboutUs: '‚ÑπÔ∏è ’Ñ’•÷Ä ’Ñ’°’Ω’´’∂',
        contactUs: 'üìû ‘ø’°’∫ ’Ñ’•’¶ ’Ä’•’ø',
        chooseCategory: '*‘∏’∂’ø÷Ä’•÷Ñ ’Æ’°’≤’Ø’•÷É’∂’ª’´ ’Ø’°’ø’•’£’∏÷Ä’´’°’∂:* ‚¨áÔ∏è', // New text
        categoryDetails: (name, description, priceMin, priceMax) => { // New text with price range
            let priceText = '';
            if (priceMin && priceMax) {
                priceText = `*‘≥’´’∂’®:* ${priceMin} - ${priceMax} ÷è`;
            } else if (priceMin) {
                priceText = `*‘≥’´’∂’®:* ${priceMin} ÷è-’´÷Å ’Ω’Ø’Ω’°’Æ`;
            }
            return `*‚ú® ${name} ‚ú®*\n\n_${description}_\n\n${priceText}\n\n*’Ä÷Ä’°’∑’°’¨’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’ß!* ü§©`;
        },
        imageNotAvailable: `_’Ü’Ø’°÷Ä’® ’∞’°’Ω’°’∂’•’¨’´ ’π’ß÷â_`,
        orderThisCategory: '‚úÖ ’ä’°’ø’æ’´÷Ä’•’¨ ‘±’µ’Ω ‘ø’°’ø’•’£’∏÷Ä’´’°’µ’´÷Å', // New text
        categoryNotFound: '‚ùå ‘∏’∂’ø÷Ä’æ’°’Æ ’Ø’°’ø’•’£’∏÷Ä’´’°’∂ ’π’£’ø’∂’æ’•÷Å÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä’´÷Å ’®’∂’ø÷Ä’•’¨÷â', // New text
        errorOccurred: '‚ùå ’ç’≠’°’¨ ’ø’•’≤’´ ’∏÷Ç’∂’•÷Å’°’æ, ’≠’∂’§÷Ä’∏÷Ç’¥ ’•’¥, ’∂’∏÷Ä’´÷Å ’Ω’Ø’Ω’•÷Ñ ’∫’°’ø’æ’•÷Ä’®÷â',
        chooseDeliveryDate: (categoryName) => `‘¥’∏÷Ç÷Ñ ’∫’°’ø’æ’´÷Ä’∏÷Ç’¥ ’•÷Ñ *"${categoryName}"* ’Ø’°’ø’•’£’∏÷Ä’´’°’µ’´÷Å÷â\n\nüóìÔ∏è *‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥, ’®’∂’ø÷Ä’•÷Ñ ’°’º’°÷Ñ’¥’°’∂ ’°’¥’Ω’°’©’´’æ’®:*`, // Updated text
        pastDateOrClosed: '‚ö†Ô∏è *’ë’°’æ’∏÷Ñ, ’°’µ’Ω ÷Ö÷Ä’æ’° ’∞’°’¥’°÷Ä ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’∂ ’°’µ’¨÷á’Ω ’π’•’∂ ’®’∂’§’∏÷Ç’∂’æ’∏÷Ç’¥ ’Ø’°’¥ ÷Ö÷Ä’∂ ’°÷Ä’§’•’∂ ’°’∂÷Å’•’¨ ’ß÷â* ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’®’∂’ø÷Ä’•’¨ ’¥’•’Ø ’°’µ’¨ ÷Ö÷Ä÷â',
        dateSelected: (formattedDate) => `*‘¥’∏÷Ç÷Ñ ’®’∂’ø÷Ä’•÷Å’´÷Ñ* _${formattedDate}_÷â\n‚è∞ *‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥, ’®’∂’ø÷Ä’•÷Ñ ’°’º’°÷Ñ’¥’°’∂ ’∞’°÷Ä’¥’°÷Ä ’™’°’¥’®:*`,
        invalidDate: '‚ùå ’ç’≠’°’¨ ’°’¥’Ω’°’©’´’æ÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’∂’∏÷Ä’´÷Å ’®’∂’ø÷Ä’•’¨÷â',
        chooseDeliveryTime: `*‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥, ’®’∂’ø÷Ä’•÷Ñ ’°’º’°÷Ñ’¥’°’∂ ’∞’°÷Ä’¥’°÷Ä ’™’°’¥’®:*`,
        pastTimeOrInvalid: '‚ö†Ô∏è *’ë’°’æ’∏÷Ñ, ’°’µ’Ω ’™’°’¥’∂ ’°÷Ä’§’•’∂ ’°’∂÷Å’•’¨ ’ß ’Ø’°’¥ ’Ω’≠’°’¨ ’ß÷â* ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥, ’®’∂’ø÷Ä’•÷Ñ ’¥’•’Ø ’°’µ’¨ ’™’°’¥÷â',
        timeSelected: (formattedDate, time) => `*‘¥’∏÷Ç÷Ñ ’®’∂’ø÷Ä’•÷Å’´÷Ñ* _${formattedDate}_ *’™’°’¥’®* _${time}_÷â\n\n*üìç ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥, ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’º’°÷Ñ’¥’°’∂ ’∞’°’Ω÷Å’•’∂ ÷á ’±’•÷Ä ’Ø’∏’∂’ø’°’Ø’ø’°’µ’´’∂ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®:* (’ï÷Ä’´’∂’°’Ø’ù *‘ø’∏’¥’´’ø’°’Ω’´ 22, ’¢’∂. 5, ’∞’•’º. 098123456*)`,
        deliveryAddressPrompt: `*üìç ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥, ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’º’°÷Ñ’¥’°’∂ ’∞’°’Ω÷Å’•’∂ ÷á ’±’•÷Ä ’Ø’∏’∂’ø’°’Ø’ø’°’µ’´’∂ ’∞’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’®:* (’ï÷Ä’´’∂’°’Ø’ù *‘ø’∏’¥’´’ø’°’Ω’´ 22, ’¢’∂. 5, ’∞’•’º. 098123456*)`,
        orderSummary: (categoryName, quantity, deliveryDate, deliveryTime, priceInfo, address) => // Updated parameters
            `*‚ú® ’Å’•÷Ä ’ä’°’ø’æ’•÷Ä’´ ‘±’¥÷É’∏÷É’∏÷Ç’¥ ‚ú®*\n` +
            `----------------------------------------\n` +
            `üíê *‘ø’°’ø’•’£’∏÷Ä’´’°:* _${categoryName}_\n` + // Updated text
            `üî¢ *’î’°’∂’°’Ø:* _${quantity} ’∞’°’ø_\n` +
            `üóìÔ∏è *‘±’º’°÷Ñ’¥’°’∂ ’°’¥’Ω’°’©’´’æ:* _${deliveryDate}_\n` +
            `‚è∞ *‘±’º’°÷Ñ’¥’°’∂ ’™’°’¥:* _${deliveryTime}_\n` +
            `üí∞ *‘≥’∂’°’µ’´’∂ ’Ø’°’ø’•’£’∏÷Ä’´’°:* _${priceInfo}_\n` + // Updated text
            `üìç *‘±’º’°÷Ñ’¥’°’∂ ’∞’°’Ω÷Å’• ÷á ’Ø’∏’∂’ø’°’Ø’ø:* _${address}_\n` +
            `----------------------------------------\n\n` +
            `*‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∏÷Ç’∑’°’§’´÷Ä ’Ω’ø’∏÷Ç’£’•’¨ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’æ’°’Æ ’ø’æ’µ’°’¨’∂’•÷Ä’®÷â* üëá`,
        confirmOrder: '‚úÖ ‘±’µ’∏, ’Ä’°’Ω’ø’°’ø’•’¨ ’ä’°’ø’æ’•÷Ä’®',
        cancelOrder: '‚ùå ’à’π, ’â’•’≤’°÷Ä’Ø’•’¨ / ’ç’Ø’Ω’•’¨ ’Ü’∏÷Ä’´÷Å',
        orderConfirmed: '*üéâ ’á’∂’∏÷Ä’∞’°’Ø’°’¨’∏÷Ç’©’µ’∏÷Ç’∂ ’Å’•÷Ä ’∫’°’ø’æ’•÷Ä’´ ’∞’°’¥’°÷Ä! üéâ*\n\n’Å’•÷Ä ’∫’°’ø’æ’•÷Ä’® ’®’∂’§’∏÷Ç’∂’æ’°’Æ ’ß÷â ’Ñ’•÷Ä ’°’∑’≠’°’ø’°’Ø’´÷Å’® *’∑’∏÷Ç’ø’∏’æ ’Ø’Ø’°’∫’æ’´ ’±’•’¶ ’∞’•’ø*’ù ’¥’°’∂÷Ä’°’¥’°’Ω’∂’•÷Ä’® ’∞’°’Ω’ø’°’ø’•’¨’∏÷Ç ÷á ’°’º’°÷Ñ’¥’°’∂ ’™’°’¥’® ’≥’∑’ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä÷â\n\n*’Ñ’°’≤’©’∏÷Ç’¥ ’•’∂÷Ñ ’£’•’≤’•÷Å’´’Ø ÷Ö÷Ä!* ‚ú®',
        orderCancelled: '‚ùå *’ä’°’ø’æ’•÷Ä’® ’π’•’≤’°÷Ä’Ø’æ’•÷Å÷â* ‘¥’∏÷Ç÷Ñ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’Ω’Ø’Ω’•’¨ ’∂’∏÷Ä ’∫’°’ø’æ’•÷Ä’ù ’Ω’•’≤’¥’•’¨’∏’æ "üíê ’ä’°’ø’æ’´÷Ä’•’¨ ‘æ’°’≤’Ø’•÷É’∏÷Ç’∂’ª" ’Ø’∏’≥’°’Ø’® ’Ø’°’¥ ’∏÷Ç’≤’°÷Ä’Ø’•’¨’∏’æ /start ’∞÷Ä’°’¥’°’∂’®÷â',
        aboutUsContent: (shopAddress, workingHours) =>
            `*üå∏ ’Ñ’•÷Ä ’Ñ’°’Ω’´’∂ üå∏*\n\n` +
            `’Ñ’•’∂÷Ñ ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’©’°÷Ä’¥ ÷á ’∂÷Ä’¢’°’£’•’≤ ’Æ’°’≤’Ø’•÷É’∂’ª’•÷Ä ÷Å’°’∂’Ø’°÷Å’°’Æ ’°’º’´’©’´ ’∞’°’¥’°÷Ä÷â ’Ñ’•÷Ä ’Æ’°’≤’´’Ø’∂’•÷Ä’® ’¢’•÷Ä’æ’∏÷Ç’¥ ’•’∂ ’¨’°’æ’°’£’∏÷Ç’µ’∂ ’∫’¨’°’∂’ø’°÷Å’´’°’∂’•÷Ä’´÷Å ÷á ’∫’°’ø÷Ä’°’Ω’ø’æ’∏÷Ç’¥ ’•’∂ ’Ω’´÷Ä’∏’æ ’∏÷Ç ’∂’æ’´÷Ä’∏÷Ç’¥’∏’æ÷â\n\n` +
            `üìç *’Ñ’•÷Ä ’∞’°’Ω÷Å’•’∂:* ${shopAddress}\n` +
            `‚è∞ *‘±’∑’≠’°’ø’°’∂÷Ñ’°’µ’´’∂ ’™’°’¥’•÷Ä:* ${workingHours}\n\n` +
            `’Ñ’•’∂÷Ñ ’Ω’´÷Ä’∏’æ ’Ω’∫’°’Ω’∏÷Ç’¥ ’•’∂÷Ñ ’±’•’¶÷â`,
        followInstagram: 'üì∏ ’Ä’•’ø÷á’•’¨ Instagram-’∏÷Ç’¥',
        contactUsContent: (phone) => `*üìû ‘ø’°’∫’æ’•÷Ñ ’Ñ’•’¶ ’Ä’•’ø üìû*\n\n’Ä’•’º’°’≠’∏’Ω’°’∞’°’¥’°÷Ä’ù *${phone}*\n\n’Ñ’•’∂÷Ñ ’∫’°’ø÷Ä’°’Ω’ø ’•’∂÷Ñ ’∫’°’ø’°’Ω’≠’°’∂’•’¨ ’±’•÷Ä ’¢’∏’¨’∏÷Ä ’∞’°÷Ä÷Å’•÷Ä’´’∂ ÷á ÷Ö’£’∂’•’¨ ’±’•÷Ä ’∫’°’ø’æ’•÷Ä’∂’•÷Ä’´ ’∞’•’ø ’Ø’°’∫’æ’°’Æ÷â`,
        callNow: 'üìû ‘∂’°’∂’£’°’∞’°÷Ä’•’¨ ’Ä’´’¥’°',
        mainMenu: 'üè† ‘≥’¨’≠’°’æ’∏÷Ä ’Ñ’•’∂’µ’∏÷Ç',
        unknownCommand: 'ü§î ’Ä’°’Ω’Ø’°’∂’°’¨’´ ’π’ß÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥, ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ ’°’º’°’ª’°÷Ä’Ø’æ’°’Æ ’∞÷Ä’°’¥’°’∂’∂’•÷Ä’® ’Ø’°’¥ ’Ω’•’≤’¥’•÷Ñ ’Ø’∏’≥’°’Ø’∂’•÷Ä’®÷â ‘µ’©’´ ’∑÷É’∏’©’æ’•’¨ ’•÷Ñ, ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ /start÷â',
        startOrderPrompt: '‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥, ’Ω’Ø’Ω’•÷Ñ ’∫’°’ø’æ’•÷Ä’® /start ’∞÷Ä’°’¥’°’∂’∏’æ ’Ø’°’¥ ’Ω’•’≤’¥’•÷Ñ "üíê ’ä’°’ø’æ’´÷Ä’•’¨ ‘æ’°’≤’Ø’•÷É’∏÷Ç’∂’ª" ’Ø’∏’≥’°’Ø’®÷â',
        noTimesForToday: '‚ö†Ô∏è ‘±’µ’Ω÷Ö÷Ä’æ’° ’∞’°’¥’°÷Ä ’¢’∏’¨’∏÷Ä ’™’°’¥’•÷Ä’∂ ’°÷Ä’§’•’∂ ’°’∂÷Å’•’¨ ’•’∂÷â',
        selectAnotherDate: 'üîô ‘∏’∂’ø÷Ä’•’¨ ’°’µ’¨ ’°’¥’Ω’°’©’´’æ',
        backToStartReload: '’à’≤’ª’∏÷Ç’µ’∂! üëã\n’Å’•÷Ä ’∂’°’≠’∏÷Ä’§ ’£’∏÷Ä’Æ’®’∂’©’°÷Å’® ’§’°’§’°÷Ä’•÷Å’æ’•’¨ ’ß ’Ø’°’¥ ’¢’∏’ø’® ’æ’•÷Ä’°’£’∏÷Ä’Æ’°÷Ä’Ø’æ’•’¨ ’ß÷â ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä’´÷Å ’Ω’Ø’Ω’•’¨÷â'
    },
    en: {
        weekDays: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
        welcome: (userName, shopName) => `*Hello, ${userName}!* üëã\nWelcome to *${shopName}*.\n\nüå∏ Flower Magic World üå∏\nWe offer fresh and elegant bouquets for any occasion. Our flowers are sourced from the best plantations and prepared with love and dedication.\n\n*How can I help you today:* üëá`,
        chooseLanguage: `*‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥, ’®’∂’ø÷Ä’•÷Ñ ’¨’•’¶’∏÷Ç’∂÷â*\n*Please, choose a language.*`,
        mainMenuWelcome: `*You are back to the main menu:* ‚ú®\nHow can I help you today?`,
        orderBouquet: 'üíê Order a Bouquet',
        aboutUs: '‚ÑπÔ∏è About Us',
        contactUs: 'üìû Contact Us',
        chooseCategory: '*Choose a bouquet category:* ‚¨áÔ∏è',
        categoryDetails: (name, description, priceMin, priceMax) => {
            let priceText = '';
            if (priceMin && priceMax) {
                priceText = `*Price:* ${priceMin} - ${priceMax} ÷è`;
            } else if (priceMin) {
                priceText = `*Price:* From ${priceMin} ÷è`;
            }
            return `*‚ú® ${name} ‚ú®*\n\n_${description}_\n\n${priceText}\n\n*Great choice!* ü§©`;
        },
        imageNotAvailable: `_Image not available._`,
        orderThisCategory: '‚úÖ Order From This Category',
        categoryNotFound: '‚ùå Selected category not found. Please choose again.',
        errorOccurred: '‚ùå An error occurred, please restart the order.',
        chooseDeliveryDate: (categoryName) => `You are ordering from the *"${categoryName}"* category.\n\nüóìÔ∏è *Please, select a delivery date:*`,
        pastDateOrClosed: '‚ö†Ô∏è *Unfortunately, orders for this day are no longer accepted or the day has passed.* Please choose another day.',
        dateSelected: (formattedDate) => `*You selected* _${formattedDate}_.\n‚è∞ *Please, choose a convenient delivery time:*`,
        invalidDate: '‚ùå Invalid date. Please choose again.',
        chooseDeliveryTime: `*Please, choose a convenient delivery time:*`,
        pastTimeOrInvalid: '‚ö†Ô∏è *Unfortunately, this time slot has passed or is invalid.* Please choose another time.',
        timeSelected: (formattedDate, time) => `*You selected* _${formattedDate}_ *at* _${time}_.\n\n*üìç Please, enter the delivery address and your contact phone number:* (e.g., *Komitas 22, apt. 5, tel. 098123456*)`,
        deliveryAddressPrompt: `*üìç Please, enter the delivery address and your contact phone number:* (e.g., *Komitas 22, apt. 5, tel. 098123456*)`,
        orderSummary: (categoryName, quantity, deliveryDate, deliveryTime, priceInfo, address) =>
            `*‚ú® Your Order Summary ‚ú®*\n` +
            `----------------------------------------\n` +
            `üíê *Category:* _${categoryName}_\n` +
            `üî¢ *Quantity:* _${quantity} pcs_\n` +
            `üóìÔ∏è *Delivery Date:* _${deliveryDate}_\n` +
            `‚è∞ *Delivery Time:* _${deliveryTime}_\n` +
            `üí∞ *Price Category:* _${priceInfo}_\n` +
            `üìç *Delivery Address & Contact:* _${address}_\n` +
            `----------------------------------------\n\n` +
            `*Please carefully check the entered data.* üëá`,
        confirmOrder: '‚úÖ Yes, Confirm Order',
        cancelOrder: '‚ùå No, Cancel / Start Over',
        orderConfirmed: '*üéâ Thank you for your order! üéâ*\n\nYour order has been accepted. Our employee *will contact you shortly* to confirm the details and arrange delivery time.\n\n*Have a beautiful day!* ‚ú®',
        orderCancelled: '‚ùå *Order cancelled.* You can start a new order by clicking the "üíê Order a Bouquet" button or by sending the /start command.',
        aboutUsContent: (shopAddress, workingHours) =>
            `*üå∏ About Us üå∏*\n\n` +
            `We offer fresh and elegant bouquets for any occasion. Our flowers are sourced from the best plantations and prepared with love and dedication.\n\n` +
            `üìç *Our Address:* ${shopAddress}\n` +
            `‚è∞ *Working Hours:* ${workingHours}\n\n` +
            `We look forward to seeing you.`,
        followInstagram: 'üì∏ Follow on Instagram',
        contactUsContent: (phone) => `*üìû Contact Us üìû*\n\nPhone Number: *${phone}*\n\nWe are ready to answer all your questions and assist with your orders.`,
        callNow: 'üìû Call Now',
        mainMenu: 'üè† Main Menu',
        unknownCommand: 'ü§î Not understood. Please use the suggested commands or click the buttons. If you are confused, send /start.',
        startOrderPrompt: 'Please, start the order with the /start command or click the "üíê Order a Bouquet" button.',
        noTimesForToday: '‚ö†Ô∏è All time slots for today have already passed.',
        selectAnotherDate: 'üîô Select another date',
        backToStartReload: 'Hello! üëã\nYour previous process was stopped or the bot was restarted. Please start again.'
    },
    ru: {
        weekDays: ['–ü–æ–Ω', '–í—Ç–æ', '–°—Ä–µ', '–ß–µ—Ç', '–ü—è—Ç', '–°—É–±', '–í–æ—Å'],
        welcome: (userName, shopName) => `*–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${userName}!* üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *${shopName}*.\n\nüå∏ –í–æ–ª—à–µ–±–Ω—ã–π –ú–∏—Ä –¶–≤–µ—Ç–æ–≤ üå∏\n–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≤–µ–∂–∏–µ –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –±—É–∫–µ—Ç—ã –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª—É—á–∞—è. –ù–∞—à–∏ —Ü–≤–µ—Ç—ã –ø—Ä–∏–≤–æ–∑—è—Ç—Å—è —Å –ª—É—á—à–∏—Ö –ø–ª–∞–Ω—Ç–∞—Ü–∏–π –∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è —Å –ª—é–±–æ–≤—å—é –∏ —Å–∞–º–æ–æ—Ç–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç—å—é.\n\n*–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è:* üëá`,
        chooseLanguage: `*‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥, ’®’∂’ø÷Ä’•÷Ñ ’¨’•’¶’∏÷Ç’∂÷â*\n*Please, choose a language.*`,
        mainMenuWelcome: `*–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:* ‚ú®\n–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?`,
        orderBouquet: 'üíê –ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç',
        aboutUs: '‚ÑπÔ∏è –û –ù–∞—Å',
        contactUs: 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏',
        chooseCategory: '*–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±—É–∫–µ—Ç–∞:* ‚¨áÔ∏è',
        categoryDetails: (name, description, priceMin, priceMax) => {
            let priceText = '';
            if (priceMin && priceMax) {
                priceText = `*–¶–µ–Ω–∞:* ${priceMin} - ${priceMax} ÷è`;
            } else if (priceMin) {
                priceText = `*–¶–µ–Ω–∞:* –û—Ç ${priceMin} ÷è`;
            }
            return `*‚ú® ${name} ‚ú®*\n\n_${description}_\n\n${priceText}\n\n*–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!* ü§©`;
        },
        imageNotAvailable: `_–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ._`,
        orderThisCategory: '‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å –ò–∑ –≠—Ç–æ–π –ö–∞—Ç–µ–≥–æ—Ä–∏–∏',
        categoryNotFound: '‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.',
        errorOccurred: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.',
        chooseDeliveryDate: (categoryName) => `–í—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ *"${categoryName}"*.\n\nüóìÔ∏è *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:*`,
        pastDateOrClosed: '‚ö†Ô∏è *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∏–ª–∏ –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à–µ–ª.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –¥–µ–Ω—å.',
        dateSelected: (formattedDate) => `*–í—ã –≤—ã–±—Ä–∞–ª–∏* _${formattedDate}_.\n‚è∞ *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:*`,
        invalidDate: '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞.',
        chooseDeliveryTime: `*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:*`,
        pastTimeOrInvalid: '‚ö†Ô∏è *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–∂–µ –ø—Ä–æ—à–µ–ª –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.',
        timeSelected: (formattedDate, time) => `*–í—ã –≤—ã–±—Ä–∞–ª–∏* _${formattedDate}_ *–≤* _${time}_.\n\n*üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* (–ù–∞–ø—Ä–∏–º–µ—Ä: *–ö–æ–º–∏—Ç–∞—Å–∞ 22, –∫–≤. 5, —Ç–µ–ª. 098123456*)`,
        deliveryAddressPrompt: `*üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:* (–ù–∞–ø—Ä–∏–º–µ—Ä: *–ö–æ–º–∏—Ç–∞—Å–∞ 22, –∫–≤. 5, —Ç–µ–ª. 098123456*)`,
        orderSummary: (categoryName, quantity, deliveryDate, deliveryTime, priceInfo, address) =>
            `*‚ú® –°–≤–æ–¥–∫–∞ –í–∞—à–µ–≥–æ –ó–∞–∫–∞–∑–∞ ‚ú®*\n` +
            `----------------------------------------\n` +
            `üíê *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* _${categoryName}_\n` +
            `üî¢ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* _${quantity} —à—Ç._\n` +
            `üóìÔ∏è *–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* _${deliveryDate}_\n` +
            `‚è∞ *–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:* _${deliveryTime}_\n` +
            `üí∞ *–¶–µ–Ω–æ–≤–∞—è –ö–∞—Ç–µ–≥–æ—Ä–∏—è:* _${priceInfo}_\n` +
            `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç:* _${address}_\n` +
            `----------------------------------------\n\n` +
            `*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.* üëá`,
        confirmOrder: '‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑',
        cancelOrder: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å / –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ',
        orderConfirmed: '*üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∑–∞–∫–∞–∑! üéâ*\n\n–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –ù–∞—à —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ *—Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è*, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ —É—Ç–æ—á–Ω–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏.\n\n*–ñ–µ–ª–∞–µ–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –¥–Ω—è!* ‚ú®',
        orderCancelled: '‚ùå *–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.* –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "üíê –ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç" –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É /start.',
        aboutUsContent: (shopAddress, workingHours) =>
            `*üå∏ –û –ù–∞—Å üå∏*\n\n` +
            `–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≤–µ–∂–∏–µ –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –±—É–∫–µ—Ç—ã –¥–ª—è –ª—é–±–æ–≥–æ —Å–ª—É—á–∞—è. –ù–∞—à–∏ —Ü–≤–µ—Ç—ã –ø—Ä–∏–≤–æ–∑—è—Ç—Å—è —Å –ª—É—á—à–∏—Ö –ø–ª–∞–Ω—Ç–∞—Ü–∏–π –∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è —Å –ª—é–±–æ–≤—å—é –∏ —Å–∞–º–æ–æ—Ç–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç—å—é.\n\n` +
            `üìç *–ù–∞—à –∞–¥—Ä–µ—Å:* ${shopAddress}\n` +
            `‚è∞ *–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:* ${workingHours}\n\n` +
            `–ú—ã –∂–¥–µ–º –≤–∞—Å.`,
        followInstagram: 'üì∏ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –≤ Instagram',
        contactUsContent: (phone) => `*üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ù–∞–º–∏ üìû*\n\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: *${phone}*\n\n–ú—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏.`,
        callNow: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å —Å–µ–π—á–∞—Å',
        mainMenu: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        unknownCommand: 'ü§î –ù–µ–ø–æ–Ω—è—Ç–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –≤—ã –∑–∞–ø—É—Ç–∞–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start.',
        startOrderPrompt: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ —Å –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üíê –ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç".',
        noTimesForToday: '‚ö†Ô∏è –í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø—Ä–æ—à–ª–∏.',
        selectAnotherDate: 'üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É',
        backToStartReload: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.'
    }
};

// ‘≥’¨’≠’°’æ’∏÷Ä ’¥’•’∂’µ’∏÷Ç’´ ’Ω’ø’•’≤’∂’°’∑’°÷Ä’® (’∞’´’¥’∂’°’Ø’°’∂ bot commands-’´ ’∞’°’¥’°÷Ä, ’°’µ’Ω ’§’•’∫÷Ñ’∏÷Ç’¥ ’¥’´’°’µ’∂ /start)
const mainMenuReplyKeyboard = {
    keyboard: [
        [{ text: '/start' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
};

/**
 * ’à÷Ä’∏’∑’∏÷Ç’¥ ’ß ’ø’•÷Ñ’Ω’ø’´ ’¨’•’¶’∏÷Ç’∂ ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’æ’´’≥’°’Ø’´÷Å÷â
 * @param {number} userId - ’ï’£’ø’°’ø’´÷Ä’∏’ª ID-’∂÷â
 * @returns {object} ’è’•÷Ñ’Ω’ø’•÷Ä’´ ÷Ö’¢’µ’•’Ø’ø’® ’®’∂’ø÷Ä’æ’°’Æ ’¨’•’¶’æ’´ ’∞’°’¥’°÷Ä÷â
 */
function getLocalizedText(userId) {
    const lang = userStates[userId]?.language || 'hy'; // ‘º’º’∏÷Ç’©’µ’°’¥’¢’ù ’∞’°’µ’•÷Ä’•’∂
    return texts[lang];
}

/**
 * ’ç’ø’°’∂’∏÷Ç’¥ ’ß ’Ø’°’ø’•’£’∏÷Ä’´’°’µ’´ ’°’∂’∏÷Ç’∂’® ’®’∂’ø÷Ä’æ’°’Æ ’¨’•’¶’æ’∏’æ÷â
 * @param {object} category - ‘ø’°’ø’•’£’∏÷Ä’´’°’µ’´ ÷Ö’¢’µ’•’Ø’ø’® data/flowers.js-’´÷Å÷â
 * @param {string} lang - ‘∏’∂’ø÷Ä’æ’°’Æ ’¨’•’¶’æ’´ ’Ø’∏’§’® (hy, en, ru)÷â
 * @returns {string} ‘ø’°’ø’•’£’∏÷Ä’´’°’µ’´ ’°’∂’∏÷Ç’∂’® ’®’∂’ø÷Ä’æ’°’Æ ’¨’•’¶’æ’∏’æ÷â
 */
function getCategoryName(category, lang) {
    return category.name[lang] || category.name['hy']; // ’é’•÷Ä’°’§’°÷Ä’±’∂’•’¨ ’∞’°’µ’•÷Ä’•’∂’®, ’•’©’• ’©’°÷Ä’£’¥’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ ’π’Ø’°
}

/**
 * ’ç’ø’°’∂’∏÷Ç’¥ ’ß ’Ø’°’ø’•’£’∏÷Ä’´’°’µ’´ ’∂’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’®’∂’ø÷Ä’æ’°’Æ ’¨’•’¶’æ’∏’æ÷â
 * @param {object} category - ‘ø’°’ø’•’£’∏÷Ä’´’°’µ’´ ÷Ö’¢’µ’•’Ø’ø’® data/flowers.js-’´÷Å÷â
 * @param {string} lang - ‘∏’∂’ø÷Ä’æ’°’Æ ’¨’•’¶’æ’´ ’Ø’∏’§’® (hy, en, ru)÷â
 * @returns {string} ‘ø’°’ø’•’£’∏÷Ä’´’°’µ’´ ’∂’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ’®’∂’ø÷Ä’æ’°’Æ ’¨’•’¶’æ’∏’æ÷â
 */
function getCategoryDescription(category, lang) {
    return category.description[lang] || category.description['hy']; // ’é’•÷Ä’°’§’°÷Ä’±’∂’•’¨ ’∞’°’µ’•÷Ä’•’∂’®, ’•’©’• ’©’°÷Ä’£’¥’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ ’π’Ø’°
}

/**
 * ’ç’ø’•’≤’Æ’∏÷Ç’¥ ’ß ÷Ö÷Ä’°÷Å’∏÷Ç’µ÷Å’´ inline ’Ω’ø’•’≤’∂’°’∑’°÷Ä’ù ’∏÷Ä’∏’∑’°’Ø’´ ’ø’°÷Ä’æ’° ÷á ’°’¥’Ω’æ’° ’∞’°’¥’°÷Ä÷â
 * ’ï’£’ø’°’£’∏÷Ä’Æ’∏÷Ç’¥ ’ß moment-timezone÷â
 * @param {number} year - ’ë’∏÷Ç÷Å’°’§÷Ä’æ’∏’≤ ’ø’°÷Ä’´’∂÷â
 * @param {number} month - ’ë’∏÷Ç÷Å’°’§÷Ä’æ’∏’≤ ’°’¥’´’Ω’® (0-’´÷Å 11)÷â
 * @param {number} userId - ’ï’£’ø’°’ø’´÷Ä’∏’ª ID-’∂÷â
 * @returns {object} Inline ’Ω’ø’•’≤’∂’°’∑’°÷Ä’´ ÷Ö’¢’µ’•’Ø’ø÷â
 */
function getCalendarKeyboard(year, month, userId) {
    const _texts = getLocalizedText(userId); // ‘º’•’¶’æ’°’Ø’°’∂ ’ø’•÷Ñ’Ω’ø’•÷Ä
    const today = moment().tz('Asia/Yerevan').startOf('day');
    const currentMonth = moment.tz([year, month], 'Asia/Yerevan');
    const daysInMonth = currentMonth.daysInMonth();
    const startDay = (currentMonth.startOf('month').day() + 6) % 7;

    const keyboard = [];
    const monthName = currentMonth.format('MMMM');
    keyboard.push([{ text: `üóìÔ∏è ${monthName}`, callback_data: 'ignore_month_year_display' }]);

    const weekDays = _texts.weekDays;
    keyboard.push(weekDays.map((d) => ({ text: d, callback_data: 'ignore_weekday' })));

    let row = new Array(startDay).fill({ text: ' ', callback_data: 'ignore_empty' });

    const [closingHourStr] = shopInfo.workingHours.split(' - ')[1].split(':');
    const closingHour = parseInt(closingHourStr);

    for (let day = 1; day <= daysInMonth; day++) {
        const date = moment().tz('Asia/Yerevan').year(year).month(month).date(day).startOf('day'); // Ensure consistent timezone
        const dateStr = date.format('YYYY-MM-DD');

        if (date.isBefore(today) || (date.isSame(today) && moment().tz('Asia/Yerevan').hour() >= closingHour)) {
            row.push({ text: `üîí${day}`, callback_data: `ignore_date_${dateStr}` });
        } else if (date.isSame(today, 'day')) {
            row.push({ text: `üìç${day}`, callback_data: `date_${dateStr}` });
        } else {
            row.push({ text: `${day}`, callback_data: `date_${dateStr}` });
        }

        if (row.length === 7) {
            keyboard.push(row);
            row = [];
        }
    }

    if (row.length > 0) {
        while (row.length < 7) row.push({ text: ' ', callback_data: 'ignore_empty' });
        keyboard.push(row);
    }

    const prev = moment([year, month]).subtract(1, 'month');
    const next = moment([year, month]).add(1, 'month');

    keyboard.push([
        { text: `‚¨ÖÔ∏è`, callback_data: `month_${prev.year()}_${prev.month()}` },
        { text: `${currentMonth.format('MMMM')}`, callback_data: 'ignore_month_name_display' },
        { text: `‚û°Ô∏è`, callback_data: `month_${next.year()}_${next.month()}` },
    ]);
    keyboard.push([{ text: _texts.mainMenu, callback_data: 'back_to_start' }]);

    return { inline_keyboard: keyboard };
}

/**
 * ’ç’ø’•’≤’Æ’∏÷Ç’¥ ’ß ’™’°’¥’•÷Ä’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’°’∂ inline ’Ω’ø’•’≤’∂’°’∑’°÷Ä’ù ÷Ö’£’ø’°’£’∏÷Ä’Æ’•’¨’∏’æ moment-timezone÷â
 * ‘±’∂÷Å’°’Æ ’™’°’¥’•÷Ä’® ’°’∂’ª’°’ø’æ’∏÷Ç’¥ ’•’∂÷â
 * @param {Date} selectedDateObj - ‘∏’∂’ø÷Ä’æ’°’Æ ’°’¥’Ω’°’©’´’æ’® (JavaScript Date ÷Ö’¢’µ’•’Ø’ø)÷â
 * @param {number} userId - ’ï’£’ø’°’ø’´÷Ä’∏’ª ID-’∂÷â
 * @returns {object} Inline ’Ω’ø’•’≤’∂’°’∑’°÷Ä’´ ÷Ö’¢’µ’•’Ø’ø÷â
 */
function getTimesKeyboard(selectedDateObj, userId) {
    const _texts = getLocalizedText(userId);
    console.log("DEBUG: getTimesKeyboard - Received selectedDateObj:", selectedDateObj);

    if (!selectedDateObj || !(selectedDateObj instanceof Date) || isNaN(selectedDateObj.getTime())) {
        console.error("ERROR: getTimesKeyboard - Invalid selectedDateObj received:", selectedDateObj);
        return { inline_keyboard: [[{ text: _texts.invalidDate, callback_data: 'select_date_back' }]] };
    }

    const now = moment().tz('Asia/Yerevan');
    const selectedDate = moment(selectedDateObj).tz('Asia/Yerevan').startOf('day');
    const dateString = selectedDate.format('YYYY-MM-DD');

    const buttons = [];
    let row = [];

    const [startHourStr] = shopInfo.workingHours.split(' - ')[0].split(':');
    const [endHourStr] = shopInfo.workingHours.split(' - ')[1].split(':');
    const startHour = parseInt(startHourStr);
    const endHour = parseInt(endHourStr);

    console.log(`DEBUG: getTimesKeyboard - Shop working hours (parsed): ${startHour}:00 - ${endHour}:00`);
    console.log(`DEBUG: getTimesKeyboard - Current time (Yerevan): ${now.format('YYYY-MM-DD HH:mm:ss')}`);
    console.log(`DEBUG: getTimesKeyboard - Selected date (start of day): ${selectedDate.format('YYYY-MM-DD HH:mm:ss')}`);

    const interval = 1;

    let hasValidTimeSlots = false;

    for (let hour = startHour; hour < endHour; hour += interval) {
        const timeSlot = selectedDate.clone().hour(hour).minute(0).second(0).millisecond(0);

        const isPastOrCurrentHour = selectedDate.isSame(now, 'day') && timeSlot.isSameOrBefore(now);

        console.log(`DEBUG: getTimesKeyboard - Processing hour: ${hour}:00. TimeSlot: ${timeSlot.format('YYYY-MM-DD HH:mm')}. Is past/current: ${isPastOrCurrentHour}`);

        if (!isPastOrCurrentHour) {
            hasValidTimeSlots = true;
            row.push({
                text: `üïí ${String(hour).padStart(2, '0')}:00`,
                callback_data: `time_${dateString}_${String(hour).padStart(2, '0')}:00`,
            });

            if (row.length === 3) {
                buttons.push(row);
                row = [];
            }
        } else {
            row.push({
                text: `üîí ${String(hour).padStart(2, '0')}:00`,
                callback_data: 'ignore_time_slot',
            });
            if (row.length === 3) {
                buttons.push(row);
                row = [];
            }
        }
    }

    if (row.length > 0) buttons.push(row);

    if (!hasValidTimeSlots && selectedDate.isSame(now, 'day')) {
        console.log("DEBUG: getTimesKeyboard - No valid time slots found for today.");
        buttons.push([{ text: _texts.noTimesForToday, callback_data: 'ignore_no_times' }]);
    }

    buttons.push([{ text: _texts.selectAnotherDate, callback_data: 'select_date_back' }]);

    return { inline_keyboard: buttons };
}


// /start ’∞÷Ä’°’¥’°’∂’´ ’¥’∑’°’Ø’∏÷Ç’¥
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;

    userStates[userId] = { step: STEPS.WAITING_FOR_LANGUAGE };

    const languageKeyboard = {
        inline_keyboard: [
            [{ text: 'üá¶üá≤ ’Ä’°’µ’•÷Ä’•’∂', callback_data: 'lang_hy' }],
            [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
            [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
        ]
    };

    bot.sendMessage(chatId, texts.hy.chooseLanguage, {
        parse_mode: 'Markdown',
        reply_markup: languageKeyboard
    });
});

// /help ’∞÷Ä’°’¥’°’∂’´ ’¥’∑’°’Ø’∏÷Ç’¥
bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const _texts = getLocalizedText(userId);
    bot.sendMessage(chatId, _texts.unknownCommand, { parse_mode: 'Markdown' });
});

// Callback query-’∂’•÷Ä’´ ’¥’∑’°’Ø’∏÷Ç’¥ (inline ’Ø’∏’≥’°’Ø’∂’•÷Ä’´ ’Ω’•’≤’¥’∏÷Ç’¥’∂’•÷Ä)
bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const data = callbackQuery.data;
    const chatId = message.chat.id;
    const userId = callbackQuery.from.id;

    bot.answerCallbackQuery(callbackQuery.id);

    // ‘º’•’¶’æ’´ ’®’∂’ø÷Ä’∏÷Ç’©’µ’°’∂ ’¥’∑’°’Ø’∏÷Ç’¥
    if (data.startsWith('lang_')) {
        const lang = data.split('_')[1];
        userStates[userId] = userStates[userId] || {};
        userStates[userId].language = lang;
        userStates[userId].step = STEPS.START;

        const _texts = getLocalizedText(userId);

        const userName = callbackQuery.from.first_name || callbackQuery.from.username;
        const inlineMenuKeyboard = {
            inline_keyboard: [
                [{ text: _texts.orderBouquet, callback_data: 'show_categories' }], // Changed callback data
                [{ text: _texts.aboutUs, callback_data: 'about_us' }],
                [{ text: _texts.contactUs, callback_data: 'contact_us' }]
            ]
        };

        bot.sendMessage(chatId,
            _texts.welcome(userName, shopInfo.name),
            {
                parse_mode: 'Markdown',
                reply_markup: inlineMenuKeyboard
            }
        );
        return;
    }


    // ‘µ’©’• ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’æ’´’≥’°’Ø’® ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’π’∏÷Ç’∂’´ ’Ø’°’¥ ’¢’∏’ø’® ’æ’•÷Ä’°’£’∏÷Ä’Æ’°÷Ä’Ø’æ’•’¨ ’ß
    if (!userStates[userId] || (userStates[userId].step === STEPS.WAITING_FOR_LANGUAGE && !data.startsWith('lang_'))) {
        userStates[userId] = { step: STEPS.WAITING_FOR_LANGUAGE };
        const languageKeyboard = {
            inline_keyboard: [
                [{ text: 'üá¶üá≤ ’Ä’°’µ’•÷Ä’•’∂', callback_data: 'lang_hy' }],
                [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
                [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
            ]
        };
        bot.sendMessage(chatId, texts.hy.chooseLanguage, {
            parse_mode: 'Markdown',
            reply_markup: languageKeyboard
        });
        return;
    }

    const _texts = getLocalizedText(userId);
    const currentLang = userStates[userId].language;

    if (data === 'show_categories') { // Changed from show_bouquets
        const inlineKeyboard = {
            inline_keyboard: categories.map(category => ([ // Changed from bouquets to categories
                {
                    text: `‚ú® ${getCategoryName(category, currentLang)}`, // Use translated name
                    callback_data: `select_category_${category.id}` // Changed callback data
                }
            ]))
        };

        bot.sendMessage(chatId, _texts.chooseCategory, { // Changed text
            parse_mode: 'Markdown',
            reply_markup: inlineKeyboard
        });
        userStates[userId].step = STEPS.SHOW_CATEGORIES; // Changed step name

    } else if (data === 'about_us') {
        bot.sendMessage(chatId,
            _texts.aboutUsContent(shopInfo.address, shopInfo.workingHours),
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: _texts.followInstagram, url: shopInfo.instagram }],
                        [{ text: _texts.mainMenu, callback_data: 'back_to_start' }]
                    ]
                }
            }
        );
    } else if (data === 'contact_us') {
        bot.sendMessage(chatId,
            _texts.contactUsContent(shopInfo.phone),
            {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: _texts.callNow, url: `tel:${shopInfo.phone}` }],
                        [{ text: _texts.mainMenu, callback_data: 'back_to_start' }]
                    ]
                }
            }
        );
    } else if (data === 'back_to_start') {
        const inlineMenuKeyboard = {
            inline_keyboard: [
                [{ text: _texts.orderBouquet, callback_data: 'show_categories' }], // Changed callback data
                [{ text: _texts.aboutUs, callback_data: 'about_us' }],
                [{ text: _texts.contactUs, callback_data: 'contact_us' }]
            ]
        };
        bot.sendMessage(chatId, _texts.mainMenuWelcome, {
            parse_mode: 'Markdown',
            reply_markup: inlineMenuKeyboard
        });
        userStates[userId].step = STEPS.START;

    } else if (data.startsWith('select_category_')) { // Changed from select_bouquet_
        const categoryId = data.replace('select_category_', '');
        const selectedCategory = categories.find(c => c.id === categoryId); // Changed from bouquets.find to categories.find

        if (selectedCategory) {
            const translatedCategoryName = getCategoryName(selectedCategory, currentLang);
            const translatedCategoryDescription = getCategoryDescription(selectedCategory, currentLang);
            const priceMin = selectedCategory.priceRange.min;
            const priceMax = selectedCategory.priceRange.max;

            try {
                await bot.sendPhoto(chatId, selectedCategory.imagePath, {
                    caption: _texts.categoryDetails(translatedCategoryName, translatedCategoryDescription, priceMin, priceMax), // New categoryDetails text
                    parse_mode: 'Markdown',
                    contentType: 'image/jpeg',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: _texts.orderThisCategory, callback_data: `confirm_category_order_${categoryId}` }] // Changed callback data
                        ]
                    }
                });
            } catch (error) {
                console.error("Error sending photo:", error.message);
                bot.sendMessage(chatId,
                    _texts.categoryDetails(translatedCategoryName, translatedCategoryDescription, priceMin, priceMax) + `\n\n` + _texts.imageNotAvailable,
                    {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: _texts.orderThisCategory, callback_data: `confirm_category_order_${categoryId}` }]
                            ]
                        }
                    }
                );
            }

            // Store the category with its localized name and priceRange for later use
            userStates[userId].selectedCategory = {
                ...selectedCategory,
                name: translatedCategoryName // Store the already translated name
            };
            userStates[userId].step = STEPS.CATEGORY_SELECTED; // Changed step name

        } else {
            bot.sendMessage(chatId, _texts.categoryNotFound); // Changed text
        }
    } else if (data.startsWith('confirm_category_order_')) { // Changed from confirm_order_
        const categoryId = data.replace('confirm_category_order_', '');
        const selectedCategory = categories.find(c => c.id === categoryId);

        if (selectedCategory && userStates[userId] && userStates[userId].selectedCategory && userStates[userId].selectedCategory.id === categoryId) {
            const translatedCategoryName = getCategoryName(selectedCategory, currentLang);
            userStates[userId].selectedCategory = {
                ...selectedCategory,
                name: translatedCategoryName
            };
            userStates[userId].quantity = 1; // Default quantity remains 1 for now

            userStates[userId].step = STEPS.WAITING_FOR_DELIVERY_DATE;
            const now = moment().tz('Asia/Yerevan');
            bot.sendMessage(chatId, _texts.chooseDeliveryDate(translatedCategoryName), {
                parse_mode: 'Markdown',
                reply_markup: getCalendarKeyboard(now.year(), now.month(), userId)
            });

        } else {
            bot.sendMessage(chatId, _texts.errorOccurred);
            userStates[userId].step = STEPS.START;
        }

    } else if (data === 'final_confirm_order' && userStates[userId] && userStates[userId].step === STEPS.ORDER_CONFIRMED) {
        const finalOrder = userStates[userId];
        console.log('’Ü’à’ê ’ä‘±’è’é‘µ’ê:', finalOrder);

        // Here you would typically send the order details to your backend/admin channel
        // For now, it just confirms to the user

        bot.sendMessage(chatId, _texts.orderConfirmed, { parse_mode: 'Markdown' });
        delete userStates[userId];

    } else if (data === 'cancel_order') {
        bot.sendMessage(chatId, _texts.orderCancelled, { parse_mode: 'Markdown' });
        delete userStates[userId];
    } else if (data.startsWith('month_')) {
        const parts = data.split('_');
        const year = parseInt(parts[1]);
        const month = parseInt(parts[2]);

        bot.editMessageReplyMarkup(getCalendarKeyboard(year, month, userId), {
            chat_id: chatId,
            message_id: message.message_id
        });
    } else if (data.startsWith('date_')) {
        let selectedDateMoment;
        try {
            const dateString = data.split('_')[1];
            selectedDateMoment = moment.tz(dateString, 'YYYY-MM-DD', 'Asia/Yerevan');

            if (!selectedDateMoment.isValid()) {
                throw new Error("Invalid Moment Date created from callback data.");
            }

            console.log(`DEBUG: date_ callback - ‘∏’∂’ø÷Ä’æ’°’Æ ÷Ö÷Ä’® (raw): ${dateString}`);
            console.log("DEBUG: date_ callback - selectedDateMoment ÷Ö’¢’µ’•’Ø’ø’®:", selectedDateMoment.format());

        } catch (error) {
            console.error("ERROR: Failed to parse date from callback data:", data, error.message);
            bot.sendMessage(chatId, _texts.invalidDate, { parse_mode: 'Markdown' });
            const nowForCalendar = moment().tz('Asia/Yerevan');
            // Ensure category name is translated here too
            const translatedCategoryName = userStates[userId].selectedCategory ? getCategoryName(categories.find(c => c.id === userStates[userId].selectedCategory.id), currentLang) : "";
            bot.sendMessage(chatId, _texts.chooseDeliveryDate(translatedCategoryName), {
                parse_mode: 'Markdown',
                reply_markup: getCalendarKeyboard(nowForCalendar.year(), nowForCalendar.month(), userId)
            });
            return;
        }

        const now = moment().tz('Asia/Yerevan');

        const [closingHourStr] = shopInfo.workingHours.split(' - ')[1].split(':');
        const closingHour = parseInt(closingHourStr);

        if (selectedDateMoment.isBefore(now, 'day') || (selectedDateMoment.isSame(now, 'day') && now.hour() >= closingHour)) {
            bot.sendMessage(chatId, _texts.pastDateOrClosed, { parse_mode: 'Markdown' });
            const nowForCalendar = moment().tz('Asia/Yerevan');
            const translatedCategoryName = userStates[userId].selectedCategory ? getCategoryName(categories.find(c => c.id === userStates[userId].selectedCategory.id), currentLang) : "";
            bot.sendMessage(chatId, _texts.chooseDeliveryDate(translatedCategoryName), {
                parse_mode: 'Markdown',
                reply_markup: getCalendarKeyboard(nowForCalendar.year(), nowForCalendar.month(), userId)
            });
            return;
        }

        userStates[userId].deliveryDate = selectedDateMoment.toDate();
        userStates[userId].step = STEPS.WAITING_FOR_DELIVERY_TIME;

        console.log("DEBUG: date_ callback - userStates[userId].deliveryDate (after assignment, Date object):", userStates[userId].deliveryDate);

        const formattedDate = selectedDateMoment.format('DD.MM.YYYY');

        bot.sendMessage(chatId, _texts.dateSelected(formattedDate), {
            parse_mode: 'Markdown',
            reply_markup: getTimesKeyboard(userStates[userId].deliveryDate, userId)
        });
    } else if (data.startsWith('time_')) {
        const parts = data.split('_');
        const dateString = parts[1];
        const time = parts[2];

        const selectedDateTime = moment.tz(`${dateString} ${time}`, 'YYYY-MM-DD HH:mm', 'Asia/Yerevan');
        const now = moment().tz('Asia/Yerevan');

        if (!selectedDateTime.isValid() || selectedDateTime.isSameOrBefore(now)) {
            bot.sendMessage(chatId, _texts.pastTimeOrInvalid, { parse_mode: 'Markdown' });
            bot.sendMessage(chatId, _texts.chooseDeliveryTime, {
                parse_mode: 'Markdown',
                reply_markup: getTimesKeyboard(userStates[userId].deliveryDate, userId)
            });
            return;
        }

        userStates[userId].deliveryTime = time;
        userStates[userId].step = STEPS.WAITING_FOR_ADDRESS;

        const deliveryDateMoment = moment(userStates[userId].deliveryDate).tz('Asia/Yerevan');
        const deliveryDateFormatted = deliveryDateMoment.format('DD.MM.YYYY');

        bot.sendMessage(chatId, _texts.timeSelected(deliveryDateFormatted, time), { parse_mode: 'Markdown' });
    } else if (data === 'select_date_back') {
        const nowForCalendar = moment().tz('Asia/Yerevan');
        // Ensure category name is translated here too
        const translatedCategoryName = userStates[userId].selectedCategory ? getCategoryName(categories.find(c => c.id === userStates[userId].selectedCategory.id), currentLang) : "";
        bot.sendMessage(chatId, _texts.chooseDeliveryDate(translatedCategoryName), {
            parse_mode: 'Markdown',
            reply_markup: getCalendarKeyboard(nowForCalendar.year(), nowForCalendar.month(), userId)
        });
        userStates[userId].step = STEPS.WAITING_FOR_DELIVERY_DATE;
    }
});

// ’Ä’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’¥’∑’°’Ø’∏÷Ç’¥ (’∞’°’ø’Ø’°’∫’•’Ω ’∞’°’Ω÷Å’•’´ ’∞’°’¥’°÷Ä)
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    if (text.startsWith('/')) {
        return;
    }

    // ‘µ’©’• ÷Ö’£’ø’°’ø’´÷Ä’∏’ª ’æ’´’≥’°’Ø’® ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’π’∏÷Ç’∂’´ ’Ø’°’¥ ’¨’•’¶’∏÷Ç’∂ ’§’•’º ’®’∂’ø÷Ä’æ’°’Æ ’π’ß
    if (!userStates[userId] || userStates[userId].step === STEPS.WAITING_FOR_LANGUAGE) {
        const languageKeyboard = {
            inline_keyboard: [
                [{ text: 'üá¶üá≤ ’Ä’°’µ’•÷Ä’•’∂', callback_data: 'lang_hy' }],
                [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
                [{ text: 'üá¨üáß English', callback_data: 'lang_en' }]
            ]
        };
        bot.sendMessage(chatId, texts.hy.chooseLanguage, {
            parse_mode: 'Markdown',
            reply_markup: languageKeyboard
        });
        return;
    }

    const _texts = getLocalizedText(userId);

    switch (userStates[userId].step) {
        case STEPS.WAITING_FOR_ADDRESS: {
            userStates[userId].address = text;
            userStates[userId].step = STEPS.ORDER_CONFIRMED;

            const category = userStates[userId].selectedCategory; // This now holds the translated name and priceRange
            const quantity = userStates[userId].quantity;
            const address = userStates[userId].address;

            const deliveryDateMoment = userStates[userId].deliveryDate && !isNaN(userStates[userId].deliveryDate.getTime())
                                 ? moment(userStates[userId].deliveryDate).tz('Asia/Yerevan')
                                 : null;
            const deliveryDate = deliveryDateMoment ? deliveryDateMoment.format('DD.MM.YYYY') : _texts.invalidDate;

            const deliveryTime = userStates[userId].deliveryTime;

            let priceInfo = '';
            if (category.priceRange.min && category.priceRange.max) {
                priceInfo = `${category.priceRange.min} - ${category.priceRange.max} ÷è`;
            } else if (category.priceRange.min) {
                priceInfo = `Starting from ${category.priceRange.min} ÷è`;
                if (currentLang === 'hy') priceInfo = `${category.priceRange.min} ÷è-’´÷Å ’Ω’Ø’Ω’°’Æ`;
                else if (currentLang === 'ru') priceInfo = `–û—Ç ${category.priceRange.min} ÷è`;
            }

            const orderSummary = _texts.orderSummary(category.name, quantity, deliveryDate, deliveryTime, priceInfo, address);

            bot.sendMessage(chatId, orderSummary, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: _texts.confirmOrder, callback_data: 'final_confirm_order' }],
                        [{ text: _texts.cancelOrder, callback_data: 'cancel_order' }]
                    ]
                }
            });
            break;
        }

        default:
            bot.sendMessage(chatId, _texts.unknownCommand, { parse_mode: 'Markdown' });
            break;
    }
});

// ’ç’≠’°’¨’∂’•÷Ä’´ ’¥’∑’°’Ø’∏÷Ç’¥ Polling-’´ ’®’∂’©’°÷Å÷Ñ’∏÷Ç’¥
bot.on('polling_error', (error) => {
    console.error(`Polling error: ${error.code} - ${error.message}`);
});

console.log('‘≤’∏’ø’® ’∫’°’ø÷Ä’°’Ω’ø ’ß ’Ω’ø’°’∂’°’¨ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä÷â');